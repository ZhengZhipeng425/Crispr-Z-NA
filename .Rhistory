scale_alpha_continuous(range = c(0, 1)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.ticks.y = element_line(),
plot.margin = margin(20, 20, 20, 20),  # 右侧留出空间
axis.line.y.left = element_line(color = "#323232", linewidth = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.05)), breaks = c(2, 0.7, 0, -0.7, 2, 4)) +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_x_continuous(limits = c(min(data_sorted$x_coord), max(data_sorted$x_coord) + 11000))+
guides(color = "none", size = "none", alpha = "none")
# print(plot)
# 保存图形到文件
ggsave("High_waterfall.png", width = 8, height = 8, dpi = 800)
load("~/Documents/GitHub/Crispr-Z-NA/GSEA/.RData")
View(Low_vs_lnput_positive)
library(readr)
gseResHigh <- read_csv("GSEA/gseResHigh.csv")
View(gseResHigh)
library(readr)
gseResLow <- read_csv("GSEA/gseResLow.csv")
View(gseResLow)
gdata <- gdata <- High_vs_lnput_positive
genelist = gdata$`pos|lfc`
names(genelist) = gdata$id
genelist = sort(genelist, decreasing = FALSE)
gseResHigh = EnrichAnalyzer(genelist, method = "GSEA", type = "Pathway", organism = "hsa")
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_180585"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
library(ggplot2)
gdata <- gdata <- High_vs_lnput_positive
genelist = gdata$`pos|lfc`
names(genelist) = gdata$id
genelist = sort(genelist, decreasing = FALSE)
gseResHigh = EnrichAnalyzer(genelist, method = "GSEA", type = "Pathway", organism = "hsa")
library(MAGeCKFlute)
gseResHigh = EnrichAnalyzer(genelist, method = "GSEA", type = "Pathway", organism = "hsa")
load("~/Documents/GitHub/Crispr-Z-NA/GSEA/gseResHigh.Rdata")
load("~/Documents/GitHub/Crispr-Z-NA/GSEA/gseResLow.Rdata")
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_180585"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
p = gseaplot2(gseResHigh, idx,base_size = 20, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 12, height = 8)
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_192823"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_975956"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_9604323"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_5358346"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_1234176"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_5687128"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_5687128"
idx = which(gseResHigh$ID == ID)
p = gseaplot2(gseResHigh, idx,base_size = 15, title = gseResHigh[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResHigh[idx]$Description, "_High.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_76061"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_76061"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_76061"
idx = which(gseResLow@ID == ID)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_76061"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
gdata <- gdata <- Low_vs_lnput_positive
genelist = gdata$`pos|lfc`
names(genelist) = gdata$id
genelist = sort(genelist, decreasing = FALSE)
gseResLow = EnrichAnalyzer(genelist, method = "GSEA", type = "Pathway", organism = "hsa")
View(gseResLow)
View(gseResLow@result)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_76061"
idx = which(gseResLow@result$ID == ID)
p = gseaplot2(gseResLow@result, idx,base_size = 15, title = gseResLow@result[idx]$Description)
idx = which(gseResLow@result$ID == ID)
p = gseaplot2(gseResLow@result, idx,base_size = 15, title = gseResLow@result[idx]$Description)
View(gseResLow)
View(gseResHigh)
View(gseResLow)
View(gseResHigh)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_76061"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResLow[idx]$Description, "_Low.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_76066"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResLow[idx]$Description, "_Low.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_3371497"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResLow[idx]$Description, "_Low.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "PID_HIF2PATHWAY"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResLow[idx]$Description, "_Low.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
# pathway = "Processing of Capped Intron-Containing Pre-mRNA"
ID = "REACTOME_379716"
idx = which(gseResLow$ID == ID)
p = gseaplot2(gseResLow, idx,base_size = 15, title = gseResLow[idx]$Description)
p[[3]][["labels"]][["x"]] = ""
p[[3]][["labels"]][["y"]] = "log2FC"
p[[1]][["labels"]][["y"]] = "Normalized Enrichment Score"
p
ggsave(paste(gseResLow[idx]$Description, "_Low.png"), plot = last_plot(),dpi = 600, width = 9, height = 6)
View(gseResLow)
View(gseResLow@result)
View(gseResHigh@result)
# 读取数据
data <- read.csv('/Users/zhengzhipeng/Documents/GitHub/Z-NA-Crispr-Screening/Crispr Sequencing data/AnalysisScripts/Low_vs_lnput.positive.csv')
# 按 LFC 值降序排列
data_sorted <- data[order(data$pos.lfc, decreasing = TRUE), ]
# 设置颜色、大小、透明度等
data_sorted$color <- ifelse(data_sorted$id %in% highlight_genes, "red", "gray")
data_sorted$size <- ifelse(data_sorted$id %in% highlight_genes, 1.5, 0.7)
data_sorted$label <- ifelse(data_sorted$id %in% highlight_genes, data_sorted$id, "")
# 生成图形对象
plot <- ggplot(data_sorted, aes(x = reorder(id, -pos.lfc), y = pos.lfc)) +
geom_hline(yintercept = 0, color = "#323232", linewidth = 0.5) +
geom_hline(yintercept = 1, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
geom_hline(yintercept = -1, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
# geom_segment(aes(x = max(data_sorted$id) + 0.5, xend = max(data_sorted$id) + 0.5, y = min(data_sorted$pos.lfc), yend = max(data_sorted$pos.lfc)), color = "green", size = 1) +
# 绘制所有点，高亮点透明
geom_point(aes(color = color, size = size, alpha = ifelse(color == "gray", 1, 0))) +
# 仅绘制高亮点，非高亮点透明
geom_point(data = data_sorted[data_sorted$color == "red", ], aes(color = color, size = size, alpha = 1)) +
# 添加标签并将标签显示在右边
geom_text(aes(label = label), hjust = -0.1, vjust = 0.5, color = "black", size = 6) +
# geom_text_repel(aes(label = label), size = 4, box.padding = 0.5, max.overlaps = 10) +
labs(title = "LFC", x = "Gene", y = "Log2 Fold Change") +
scale_color_manual(values = c("gray", "#EE7647")) +
scale_size_continuous(range = c(0, 1.2)) +
scale_alpha_continuous(range = c(0, 1)) +
# theme_bw() +  # 使用 theme_bw() 设置白色背景
theme(
axis.text.x = element_blank(),  # 隐藏 x 轴标签
axis.ticks.x = element_blank(),  # 隐藏 x 轴刻度线
axis.text.y = element_text(size = 10),  # 设置 y 轴标签的字体大小
axis.ticks.y = element_line(),  # 显示 y 轴刻度线
plot.margin = margin(20, 20, 20, 20),  # 添加适当的图形边距
axis.line.y.left = element_line(color = "#323232", linewidth = 0.5),  # 添加y竖直坐标轴线
panel.grid.major = element_blank(),  # 移除主网格线
panel.grid.minor = element_blank(),  # 移除次网格线
panel.background = element_rect(fill = "white", color = "white"),  # 设置绘图区背景为白色
plot.background = element_rect(fill = "white", color = "white")
) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.05))) +  # 在上下添加一些空白
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +  # 在左右添加一些空白
guides(color = "none", size = "none", alpha = "none")
plot
lfc_column <- "pos|lfc"  # 用户可以修改为其他列名
# 读取高亮基因列表
# tmp <- read.csv('/Users/zhengzhipeng/Documents/GitHub/Crispr-Z-NA/sg.csv', header = FALSE)
# highlight_genes <- as.character(tmp[,1])  # 确保是字符型
highlight_genes <- list("JMJD6", "MRPS9", "FANCI",
"IRS4", "NUP205", "ZNF768",
"TAF1", "POLR1E", "GTF3C5", "HNRNPU",
"WDR33", "PCF11")
# 读取数据
# data <- read.csv('/Users/zhengzhipeng/Documents/GitHub/Z-NA-Crispr-Screening/Crispr Sequencing data/AnalysisScripts/Low_vs_lnput.positive.csv')
data <- Low_vs_lnput_positive
# 按 LFC 值降序排列
data_sorted <- data[order(data[[lfc_column]], decreasing = TRUE), ]
data_sorted$x_coord <- seq(1, nrow(data_sorted), by = 1)
# 设置颜色、大小、透明度等
data_sorted$color <- ifelse(data_sorted$id %in% highlight_genes, "red", "gray")
data_sorted$size <- ifelse(data_sorted$id %in% highlight_genes, 1.5, 0.7)
data_sorted$label <- ifelse(data_sorted$id %in% highlight_genes, data_sorted$id, "")
# 计算 x 轴终点的位置
max_x <- length(unique(data_sorted$id))  # 基因数量
extra_offset <- 8000  # 额外偏移量，调整以优化可读性
label_x <- max_x + extra_offset  # 标签最终的 x 轴位置
# 均匀分配每个标签的 y 轴位置
label_y_values <- seq(max(data_sorted[[lfc_column]]), min(data_sorted[[lfc_column]]), length.out = sum(data_sorted$color == "red"))
# 筛选高亮基因
highlight_data <- data_sorted[data_sorted$color == "red", ]
# 按 y 轴值（lfc_column）排序，确保标签从上到下排布
highlight_data <- highlight_data[order(-highlight_data[[lfc_column]]), ]
# 将 label_y 分配给对应的红色基因
highlight_data$label_y <- label_y_values
# 根据基因名（id）将 label_y 值传递到 data_sorted 中
data_sorted$label_y <- ifelse(data_sorted$id %in% highlight_data$id,
highlight_data$label_y[match(data_sorted$id, highlight_data$id)],
NA)
# 生成图形对象
ggplot(data_sorted, aes(x = x_coord, y = .data[[lfc_column]])) +
geom_hline(yintercept = 0, color = "#323232", linewidth = 0.5) +
geom_hline(yintercept = 0.7, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
geom_hline(yintercept = -0.7, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
geom_point(aes(color = factor(color), size = size, alpha = ifelse(color == "gray", 1, 0))) +
geom_point(data = data_sorted[data_sorted$color == "red", ], aes(color = factor(color), size = size, alpha = 1)) +
# 如果要筛选出只画lfc大于一定值的标签，可以使用这种代码
# geom_segment(data = data_sorted[data_sorted$color == "red" & data_sorted[[lfc_column]] > 0.7, ],
# 连接数据点到右侧标签的折线
geom_segment(data = data_sorted[data_sorted$color == "red" , ],
aes(x = x_coord, xend = max_x + 200,
y = .data[[lfc_column]], yend = label_y),
color = "black", linewidth = 0.1, alpha = 0.5) +
# 在 label_y 处加水平线，连接到最终的标签位置
geom_segment(data = data_sorted[data_sorted$color == "red" , ],
aes(x = max_x + 200, xend = label_x,
y = label_y, yend = label_y),
color = "black", linewidth = 0.1, alpha = 0.5) +
# 在右侧显示基因标签
geom_text(data = data_sorted[data_sorted$color == "red" , ],
aes(x = label_x, y = label_y, label = label),
size = 6, hjust = 0) +
labs(title = NULL, x = "Gene", y = "Log2 Fold Change") +
scale_color_manual(values = c("gray", "#EE7647")) +
scale_size_continuous(range = c(0, 1.2)) +
scale_alpha_continuous(range = c(0, 1)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.ticks.y = element_line(),
plot.margin = margin(20, 20, 20, 20),  # 右侧留出空间
axis.line.y.left = element_line(color = "#323232", linewidth = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.05)), breaks = c(2, 0.7, 0, -0.7, 2, 4)) +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_x_continuous(limits = c(min(data_sorted$x_coord), max(data_sorted$x_coord) + 11000))+
guides(color = "none", size = "none", alpha = "none")
# print(plot)
# 保存图形到文件
ggsave("Low_waterfall.png", width = 8, height = 8, dpi = 800)
# print(plot)
# 保存图形到文件
ggsave("Low_waterfall.png", width = 8.5, height = 8, dpi = 800)
# print(plot)
# 保存图形到文件
ggsave("Low_waterfall.png", width = 9, height = 8, dpi = 800)
lfc_column <- "pos|lfc"  # 用户可以修改为其他列名
# 读取高亮基因列表
# tmp <- read.csv('/Users/zhengzhipeng/Documents/GitHub/Crispr-Z-NA/sg.csv', header = FALSE)
# highlight_genes <- as.character(tmp[,1])  # 确保是字符型
highlight_genes <- list("METTL14", "RBM19", "ZCCHC7", "ZCRB1",
"EIF4H", "SETD2", "ILF3", "NUP93",
"FABP5", "SLC4A10")
# 读取数据
# data <- read.csv('/Users/zhengzhipeng/Documents/GitHub/Z-NA-Crispr-Screening/Crispr Sequencing data/AnalysisScripts/Low_vs_lnput.positive.csv')
data <- High_vs_lnput_positive
# 按 LFC 值降序排列
data_sorted <- data[order(data[[lfc_column]], decreasing = TRUE), ]
data_sorted$x_coord <- seq(1, nrow(data_sorted), by = 1)
# 设置颜色、大小、透明度等
data_sorted$color <- ifelse(data_sorted$id %in% highlight_genes, "red", "gray")
data_sorted$size <- ifelse(data_sorted$id %in% highlight_genes, 1.5, 0.7)
data_sorted$label <- ifelse(data_sorted$id %in% highlight_genes, data_sorted$id, "")
# 计算 x 轴终点的位置
max_x <- length(unique(data_sorted$id))  # 基因数量
extra_offset <- 8000  # 额外偏移量，调整以优化可读性
label_x <- max_x + extra_offset  # 标签最终的 x 轴位置
# 均匀分配每个标签的 y 轴位置
label_y_values <- seq(max(data_sorted[[lfc_column]]), min(data_sorted[[lfc_column]]), length.out = sum(data_sorted$color == "red"))
# 筛选高亮基因
highlight_data <- data_sorted[data_sorted$color == "red", ]
# 按 y 轴值（lfc_column）排序，确保标签从上到下排布
highlight_data <- highlight_data[order(-highlight_data[[lfc_column]]), ]
# 将 label_y 分配给对应的红色基因
highlight_data$label_y <- label_y_values
# 根据基因名（id）将 label_y 值传递到 data_sorted 中
data_sorted$label_y <- ifelse(data_sorted$id %in% highlight_data$id,
highlight_data$label_y[match(data_sorted$id, highlight_data$id)],
NA)
# 生成图形对象
ggplot(data_sorted, aes(x = x_coord, y = .data[[lfc_column]])) +
geom_hline(yintercept = 0, color = "#323232", linewidth = 0.5) +
geom_hline(yintercept = 0.7, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
geom_hline(yintercept = -0.7, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
geom_point(aes(color = factor(color), size = size, alpha = ifelse(color == "gray", 1, 0))) +
geom_point(data = data_sorted[data_sorted$color == "red", ], aes(color = factor(color), size = size, alpha = 1)) +
# 如果要筛选出只画lfc大于一定值的标签，可以使用这种代码
# geom_segment(data = data_sorted[data_sorted$color == "red" & data_sorted[[lfc_column]] > 0.7, ],
# 连接数据点到右侧标签的折线
geom_segment(data = data_sorted[data_sorted$color == "red" , ],
aes(x = x_coord, xend = max_x + 200,
y = .data[[lfc_column]], yend = label_y),
color = "black", linewidth = 0.1, alpha = 0.5) +
# 在 label_y 处加水平线，连接到最终的标签位置
geom_segment(data = data_sorted[data_sorted$color == "red" , ],
aes(x = max_x + 200, xend = label_x,
y = label_y, yend = label_y),
color = "black", linewidth = 0.1, alpha = 0.5) +
# 在右侧显示基因标签
geom_text(data = data_sorted[data_sorted$color == "red" , ],
aes(x = label_x, y = label_y, label = label),
size = 6, hjust = 0) +
labs(title = NULL, x = "Gene", y = "Log2 Fold Change") +
scale_color_manual(values = c("gray", "#EE7647")) +
scale_size_continuous(range = c(0, 1.2)) +
scale_alpha_continuous(range = c(0, 1)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.ticks.y = element_line(),
plot.margin = margin(20, 20, 20, 20),  # 右侧留出空间
axis.line.y.left = element_line(color = "#323232", linewidth = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.05)), breaks = c(2, 0.7, 0, -0.7, 2, 4)) +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_x_continuous(limits = c(min(data_sorted$x_coord), max(data_sorted$x_coord) + 11000))+
guides(color = "none", size = "none", alpha = "none")
# print(plot)
# 保存图形到文件
ggsave("High_waterfall.png", width = 8, height = 8, dpi = 800)
# print(plot)
# 保存图形到文件
ggsave("High_waterfall.png", width = 9, height = 8, dpi = 800)
# 读取高亮基因列表
# tmp <- read.csv('/Users/zhengzhipeng/Documents/GitHub/Crispr-Z-NA/sg.csv', header = FALSE)
# highlight_genes <- as.character(tmp[,1])  # 确保是字符型
highlight_genes <- list("JMJD6", "MRPS9", "FANCI",
"IRS4", "NUP205", "ZNF768",
"TAF1", "POLR1E", "GTF3C5", "HNRNPA1",
"WDR33", "PCF11")
# 读取数据
# data <- read.csv('/Users/zhengzhipeng/Documents/GitHub/Z-NA-Crispr-Screening/Crispr Sequencing data/AnalysisScripts/Low_vs_lnput.positive.csv')
data <- Low_vs_lnput_positive
# 按 LFC 值降序排列
data_sorted <- data[order(data[[lfc_column]], decreasing = TRUE), ]
data_sorted$x_coord <- seq(1, nrow(data_sorted), by = 1)
# 设置颜色、大小、透明度等
data_sorted$color <- ifelse(data_sorted$id %in% highlight_genes, "red", "gray")
data_sorted$size <- ifelse(data_sorted$id %in% highlight_genes, 1.5, 0.7)
data_sorted$label <- ifelse(data_sorted$id %in% highlight_genes, data_sorted$id, "")
# 计算 x 轴终点的位置
max_x <- length(unique(data_sorted$id))  # 基因数量
extra_offset <- 8000  # 额外偏移量，调整以优化可读性
label_x <- max_x + extra_offset  # 标签最终的 x 轴位置
# 均匀分配每个标签的 y 轴位置
label_y_values <- seq(max(data_sorted[[lfc_column]]), min(data_sorted[[lfc_column]]), length.out = sum(data_sorted$color == "red"))
# 筛选高亮基因
highlight_data <- data_sorted[data_sorted$color == "red", ]
# 按 y 轴值（lfc_column）排序，确保标签从上到下排布
highlight_data <- highlight_data[order(-highlight_data[[lfc_column]]), ]
# 将 label_y 分配给对应的红色基因
highlight_data$label_y <- label_y_values
# 根据基因名（id）将 label_y 值传递到 data_sorted 中
data_sorted$label_y <- ifelse(data_sorted$id %in% highlight_data$id,
highlight_data$label_y[match(data_sorted$id, highlight_data$id)],
NA)
# 生成图形对象
ggplot(data_sorted, aes(x = x_coord, y = .data[[lfc_column]])) +
geom_hline(yintercept = 0, color = "#323232", linewidth = 0.5) +
geom_hline(yintercept = 0.7, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
geom_hline(yintercept = -0.7, linetype = "dashed", color = "#6DAEDB", linewidth = 0.5) +
geom_point(aes(color = factor(color), size = size, alpha = ifelse(color == "gray", 1, 0))) +
geom_point(data = data_sorted[data_sorted$color == "red", ], aes(color = factor(color), size = size, alpha = 1)) +
# 如果要筛选出只画lfc大于一定值的标签，可以使用这种代码
# geom_segment(data = data_sorted[data_sorted$color == "red" & data_sorted[[lfc_column]] > 0.7, ],
# 连接数据点到右侧标签的折线
geom_segment(data = data_sorted[data_sorted$color == "red" , ],
aes(x = x_coord, xend = max_x + 200,
y = .data[[lfc_column]], yend = label_y),
color = "black", linewidth = 0.1, alpha = 0.5) +
# 在 label_y 处加水平线，连接到最终的标签位置
geom_segment(data = data_sorted[data_sorted$color == "red" , ],
aes(x = max_x + 200, xend = label_x,
y = label_y, yend = label_y),
color = "black", linewidth = 0.1, alpha = 0.5) +
# 在右侧显示基因标签
geom_text(data = data_sorted[data_sorted$color == "red" , ],
aes(x = label_x, y = label_y, label = label),
size = 6, hjust = 0) +
labs(title = NULL, x = "Gene", y = "Log2 Fold Change") +
scale_color_manual(values = c("gray", "#EE7647")) +
scale_size_continuous(range = c(0, 1.2)) +
scale_alpha_continuous(range = c(0, 1)) +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.ticks.y = element_line(),
plot.margin = margin(20, 20, 20, 20),  # 右侧留出空间
axis.line.y.left = element_line(color = "#323232", linewidth = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", color = "white"),
plot.background = element_rect(fill = "white", color = "white")
) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.05)), breaks = c(2, 0.7, 0, -0.7, 2, 4)) +
scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
scale_x_continuous(limits = c(min(data_sorted$x_coord), max(data_sorted$x_coord) + 11000))+
guides(color = "none", size = "none", alpha = "none")
# print(plot)
# 保存图形到文件
ggsave("Low_waterfall.png", width = 9, height = 8, dpi = 800)
# print(plot)
# 保存图形到文件
ggsave("Low_waterfall.png", width = 9.5, height = 8, dpi = 800)
